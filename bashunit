#!/usr/bin/env bash


base_dir="$(readlink -f "$(dirname "${0}")")"
_tests_passed=0
_tests_failed=0
_asserts_passed=0
_asserts_failed=0


_test_prefix='test__'

_color_black=0
_color_red=1
_color_green=2
_color_yellow=3
_color_blue=4
_color_magenta=5
_color_cyan=6
_color_white=7
_color_default=9

tests=($(grep -E "^${_test_prefix}" "${0}" | sed "s/${_test_prefix}\(.\+\)().*$/\1/"))
if [ ${#tests[@]} -eq 0 ]; then
    echo "Error: bunit found no tests in '${0}'" > /dev/stderr
    exit 1
fi

_bold() {
    tput bold
    echo -n $@
    tput sgr0
}

_color() {
    local color=$1; shift
    tput setaf "${color}"
    echo -n $@
    tput setaf "${_color_default}"
}

alert() {
    echo "$(_color ${_color_red} "$(_bold $@)")"
}

_run_if_exists() {
    local name="${1}"; shift
    local kind=$(type -t "${name}" 2> /dev/null)
    if [ "${kind}" == 'function' ]; then
        "${name}" $@
    fi
}

_on_exit() {
    echo -n $(_color ${_color_white} $(_bold 'bashunit summary:'))
    echo -n ' tests passed: '
    echo -n $(_color ${_color_green} $(_bold "${_tests_passed}"))
    echo -n ' / failed: '
    echo $(_color ${_color_red} $(_bold "${_tests_failed}"))
    echo
    exit ${_tests_failed}
}
trap _on_exit EXIT

assert() {
    local name="${1}"; shift
    local expected="${1}"; shift
    local operator="${1}"; shift
    local observed="${1}"; shift

    local assertion_string="'${expected}' ${operator} '${observed}'"

    $(eval "[ '${expected}' ${operator} '${observed}' ] && true || false")
    local success=$?

    if [ ${success} -eq 0 ]; then
        _asserts_passed=$(( _asserts_passed + 1 ))
    else
        _asserts_failed=$(( _asserts_failed + 1 ))
    fi

    if [ ${success} -eq 1 ] || [ "${BASHUNIT_SHOW_SUCCESS}" == 'true'  ]; then
        echo
        echo -ne '\t'
        if [ ${success} -eq 0 ]; then
            echo -n $(_color ${_color_green} $(_bold 'passed'))
        else
            echo -n $(_color ${_color_red} $(_bold 'failed'))
        fi
        echo -n ': '

        echo $(_color ${_color_white} "$(_bold "${name}")")

        echo -ne '\t'
        echo -n $(_color ${_color_yellow} "$(_bold 'assert')")
        echo -n ' '
        echo -n $(_color ${_color_cyan} "$(_bold "${assertion_string}")")
        echo
    fi

    return ${success}
}

run() {
    if [ ${#} -eq 0 ]; then
        tests_to_run=(${tests[@]})
    else
        tests_to_run=($(echo ${@} | sed 's/ \+/\n/g' | sed "s/${_test_prefix}//g" | sort -u))
    fi

    echo -n "$(_color ${_color_yellow} "$(_bold "BASHUnit Start:")") -- "
    echo -n "running "
    echo $(_color ${_color_white} "${#tests_to_run[@]} test(s)")
    echo

    _run_if_exists 'before_script'
    for test in ${tests_to_run[@]}; do
        _run_if_exists 'before_test'

        _asserts_passed=0
        _asserts_failed=0

        echo -n "$(_color ${_color_magenta} "$(_bold 'running:')")"
        echo -n ' '
        echo $(_color ${_color_blue} "$(_bold "${test//_/ }:")")
        local passed=0
        if "${_test_prefix}${test}"; then
            _tests_passed=$(( _tests_passed + 1 ))
        else
            passed=1
            _tests_failed=$(( _tests_failed + 1 ))
        fi

        echo
        echo -ne '\t'
        echo -n $(_color ${_color_white} $(_bold "results:"))
        echo -n ' assertions passed: '
        echo -n $(_color ${_color_green} $(_bold "${_asserts_passed}"))
        echo -n ' / failed: '
        echo $(_color ${_color_red} $(_bold "${_asserts_failed}"))
        echo
        echo
        echo

        _run_if_exists 'after_test' ${passed}
    done

    _run_if_exists 'after_script' ${_tests_passed} ${_tests_failed}
}

clear
run $@
