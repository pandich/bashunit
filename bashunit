#!/usr/bin/env bash

declare base_dir="$(readlink -f "$(dirname "${0}")")"
declare passed_count=0
declare error_count=0

declare -A _colors
_colors['red']=31
_colors['green']=32
_colors['yellow']=33
_colors['blue']=34
_colors['white']=37

declare -a tests=($(grep -E '^test__\S+()' "${0}" | cut -d'(' -f1))
if [ ${#tests[@]} -eq 0 ]; then
    echo "Error: bunit found no tests in '${0}'" > /dev/stderr
    exit 1
fi

_bold() {
    tput bold
    echo -n $@
    tput sgr0
}

_color() {
    local name="${1}"; shift
    echo -ne "\e[0;${_colors[${name}]}m${@}\e[0m"
}

_run_if_exists() {
    [[ "$(declare -Ff "${1}")" ]] && "${1}"
}

_on_exit() {
    echo $(_color white $(_bold 'Summary:'))
    echo
    echo -n 'passed: '
    echo -n $(_color green $(_bold "${passed_count}"))
    echo -n ' / errors: '
    echo $(_color red $(_bold "${error_count}"))
    echo
    echo $(_color yellow $(_bold 'done.'))
    exit ${error_count}
}
trap _on_exit EXIT

assert() {
    local name="${1}"; shift
    local expected="${1}"; shift
    local operator="${1}"; shift
    local observed="${1}"; shift

    echo -n "assertion '"
    echo -n $(_color white "${name}")
    echo -n "': "
    $(eval "[ '${expected}' ${operator} '${observed}' ] && true || false")
    if [ ${?} -eq 0 ]; then
        success=0
        echo -n $(_color green $(_bold 'passed'))
    else
        success=1
        echo -n $(_color red $(_bold 'failed'))
    fi

    echo -n $(_color white " - expected '")
    echo -n $(_color yellow "${expected}")
    echo -n $(_color white "' - observed '")
    echo -n $(_color yellow "${observed}")
    echo -n $(_color white "'")
    echo
    echo

    return ${success}
}

run() {
    declare -a tests_to_run
    if [ ${#requested_tests[@]} -ne 0 ]; then
        tests_to_run=(${!requested_tests[@]})
    else
        tests_to_run=(${tests[@]})
    fi

    echo -n "$(_color yellow "$(_bold "BASHUnit Start:")") -- "
    echo -n "running "
    echo $(_color white "${#tests_to_run[@]} test(s)")
    echo

    _run_if_exists 'before_script'
    for test in ${tests_to_run[@]}; do
        _run_if_exists 'before_test'

        local name="$(echo "${test}" | sed 's/^test__//')"

        echo $(_color white '--------------------------------------------------')
        echo -n 'starting test: '
        echo $(_color blue "${name}")
        echo $(_color white '--------------------------------------------------')
        local passed=1
        if ${test}; then
            passed_count=$(( passed_count + 1 ))
        else
            passed=0
            error_count=$(( error_count + 1 ))
        fi
        echo
        echo -n '[ test '
        if [ ${passed} -eq 1 ]; then
            echo -n $(_color green $(_bold 'passed'))
        else
            echo -n $(_color red $(_bold 'failed'))
        fi
        echo ' ]'
        echo
        echo

        _run_if_exists 'after_test'
    done
    _run_if_exists 'after_script'
}

declare -gA requested_tests=()
for test in $@; do
    requested_tests["test__${test}"]=1
done

run
